Project Initilization...
- npm init
- pkg.json ("type": "module", Use module JS - Import Syntax)

X--------------X--------------X--------------X--------------X--------------

Push to Git
- git init
- git add .
- git commit -m "add initial files for backend"
- git branch -M main
- git remote add origin https://github.com/IzhanHassan007/backend-project.git
- git push -u origin main

X---------------X-------------X--------------X--------------X--------------

Folders - Files for Project...
1- public/temp - (.gitkeep) // this is for to keep git in repo unless its empty or not.
2- .gitignore - this is for files which ignore by git. "use gitignore generator"
3- .env file 
4- src folder - Files are app.js, constant.js, index.js
5- src folder - mkdir controllers, db, middlewares, models, routes, utils

** Controller = Major Functionality.
** db = database connection logic.
** middlewares = code run in-between.
** models = database models.
** routes = app.get/insta, /twitter.
** utils = utilities, 

X---------------X-------------X--------------X--------------X--------------

- We use nodemon for restart server automatically (npm i -D nodemon)
- dev dependency installation. (only for development not for production)
- "scripts": { "src": "nodemon src/index.js"},
- We install Prettier for Beautification of Code Setup. {.prettierrc , ,prettierignore} (npm i -D prettier)

X---------------X-------------X--------------X--------------X--------------

07- How to connect database...

- npm i mongoose express dotenv
- Database is in another continent...
- Data base m hamesha "Try & Catch" lagana h or "Resolve & Reject"..
- Data base m hamesha "Async & Await" lagana h q k time lagta h..

Not A Better Approach - 
function connectDB(){};
connectDB();

()() - IFFI Concept..
(Function)(Immediatly Execute)

X---------------X-------------X--------------X--------------X--------------

08- Custom API Response...

.. npm i cookie-parser
.. npm i cors - cross origin resousrce sharing
    app.use(cors()) - app.use hum tb use krengy jb hum middlewares use kr rhy hony  

X---------------X-------------X--------------X--------------X--------------

(app.js)
Ye file Express app ki core configuration handle karti hai.
Isme hum:
1Ô∏è‚É£ CORS setup karte hain taake frontend-backend safely connect ho sakein.
2Ô∏è‚É£ Body parsers use karte hain taake JSON aur form data easily handle ho jaye.
3Ô∏è‚É£ Static files serve karte hain public folder se, jaise images ya CSS.
4Ô∏è‚É£ Cookies ko parse karte hain taake authentication ya sessions kaam karein.

Aakhir mein app ko export karte hain taake dusri files mein server start kiya ja sake.

X---------------X-------------X--------------X--------------X--------------

(asyncHandler.js)
- asyncHandler aik higher order function hai jo har async request handler ko wrap karta hai taake errors ko automatically handle kiya ja sake.
- Isse humein har controller mein alag se try-catch nahi likhna padta, aur agar koi error aaye to Express ka error handler use process kar leta hai.

X---------------X-------------X--------------X--------------X--------------

(apiError.js)
- apiError aik custom error class hai jo hum API mein consistent error response dene ke liye banate hain.
- Iska maksad ye hai ke jab bhi koi error aaye to hum ek standard format mein status code, message aur extra errors bhej saken ‚Äî taake frontend ko samajhne mein asani ho aur debugging bhi easy ho jaye.

X---------------X-------------X--------------X--------------X--------------

(apiResponse.js)
ApiResponse aik custom response class hai jo API ke successful responses ko ek standard format mein bhejne ke liye use hoti hai.
Isme status code, data, aur message hota hai ‚Äî taake har API response consistent aur samajhne mein easy ho.

X---------------X-------------X--------------X--------------X--------------

HTTP status codes batate hain ke server se response ka nature kya hai:

1Ô∏è‚É£ Informational responses (100‚Äì199)
Server keh raha hai: ‚ÄúRequest mili hai, abhi process ho rahi hai.‚Äù

2Ô∏è‚É£ Successful responses (200‚Äì299)
Matlab: ‚ÄúSab theek hai, request successfully complete ho gayi.‚Äù

3Ô∏è‚É£ Redirection messages (300‚Äì399)
Client ko bola jata hai: ‚ÄúResource kisi aur jagah shift ho gaya, wahan chalo.‚Äù

4Ô∏è‚É£ Client error responses (400‚Äì499)
Matlab: ‚ÄúRequest galat hai, user ki taraf se koi masla hai.‚Äù (e.g., 404 Not Found)

5Ô∏è‚É£ Server error responses (500‚Äì599)
Matlab: ‚ÄúServer ki taraf se masla hai, request process nahi ho saki.‚Äù

X---------------X-------------X--------------X--------------X--------------

09- User and Video Model...

- database m kisi bh field ko searchable banana h optimize way m to usky model m index: true krdo

"npm i mongoose-aggregate-paginate-v2"
- This allow to write aggregate queries.

"npm i bcrypt"
- It helps you to hash your password.

-  JSON Web Tokens (JWT) generate aur verify karne ke liye use hota hai, jo authentication (login/session management) aur secure data transfer ke liye hotay hain.

error - req - response - next

"
userSchema.pre("save", async function (next) {
    if(!this.isModified("password")) return next();

    this.password = bcrypt.hash(this.password, 10) 
    next() 
})
"

- pre("save") ka matlab: Jab user MongoDB me save hone wala ho, us se pehle ye function chalega.

- if(!this.isModified("password")) return next();
Agar password change hi nahi hua (ya new set nahi kiya), to directly next step pe chala jao (hash na karo).

- this.password = bcrypt.hash(this.password, 10)
Agar password change hua hai, to usay bcrypt se encrypt (hash) karo (10 rounds salt ke).

- next()
Process complete hone ke baad agli step pe move karo (save ho jaye).

X---------------X-------------X--------------X--------------X--------------

10- How to Upload FIle in backend...

npm i cloudinary 
cloudinary ‚Üí Ye Cloudinary service ka SDK h, jo images/videos ko cloud par upload, manage aur access krny k liye use hota h.

npm i multer
<<<<<<< HEAD
multer ‚Üí Ye middleware h jo file uploads (images, videos etc.) ko handle krny k liye use hota h (Express apps me).

X---------------X-------------X--------------X--------------X--------------

10- HTTP crash course | http Methods | http headers

HTTP (HyperText Transfer Protocol):

Ye web par data transfer ka basic protocol hai.

Jab aap HTTP use karte ho, browser aur server ke beech data plain text me jata hai.

Iska matlab koi hacker easily data intercept (read/change) kar sakta hai.

Port 80 use karta hai.

Mostly normal websites (blogs, news, simple info pages) use karti hain.

HTTPS (HyperText Transfer Protocol Secure):

Ye HTTP ka secure version hai.

SSL/TLS certificates use karta hai jo data ko encrypt karte hain.

Agar koi hacker data intercept kare bhi, wo read nahi kar sakta.

Port 443 use karta hai.

Ye login pages, banking, payments, e-commerce ke liye must hai.

Browser me padlock icon dikhata hai jo trust ka signal hai.

Easy samajh lo:
üëâ HTTP = normal road (koi bhi sun/see sakta hai).
üëâ HTTPS = secure tunnel (encrypted, safe).

1. Request Header
Kya hai? ‚Üí Client (browser/app) se server ko bheja gaya info.

Use: Server ko batata hai ke kis tarah ka data chahiye aur client ka environment kaisa hai.

Example:

GET /index.html

Host: www.example.com

User-Agent: Chrome/120

2. Response Header
Kya hai? ‚Üí Server ka client ko jawab me bheja gaya info.

Use: Client ko batata hai ke response me kya aa raha hai aur kaise handle karna hai.

Example:

Content-Type: text/html

Content-Length: 348

Server: Apache

3. Representation Header
Kya hai? ‚Üí Ye data ki type & format ko represent karta hai.

Use: Batata hai ke response ka content kaisa hai (JSON, HTML, image, etc.).

Example:

Content-Type: application/json

Content-Encoding: gzip

4. Payload Header
Kya hai? ‚Üí Request/response ke actual data (body) ke baare me info deta hai.

Use: Batata hai ke body me kitna data hai, format kya hai, etc.

Example:

Content-Length: 1024

Content-Type: multipart/form-data

Easy Samajh Lo:

Request Header ‚Üí Client ki info (browser ‚Üí server).

Response Header ‚Üí Server ka jawab (server ‚Üí browser).

Representation Header ‚Üí Data kis type ka hai.

Payload Header ‚Üí Body ke data ka size/type.

üìå HTTP Status Codes
üîπ Categories (Kis type ke codes hotay hain):
1xx ‚Üí Informational
Matlab server ne request le li aur ab process ho rahi hai.

2xx ‚Üí Success
Matlab request sahi tarah process ho gayi aur successful response diya gaya.

3xx ‚Üí Redirection
Matlab resource kahi aur shift ho gaya, browser ko dusri jagah bhejna hai.

4xx ‚Üí Client Error
Matlab request bhejne wale (client) ki galti hai, jaise wrong URL ya unauthorized access.

5xx ‚Üí Server Error
Matlab server ki taraf se koi problem hui hai.

‚úÖ Important Codes (Zyada use hone walay):
üîπ 1xx ‚Äì Informational

100 ‚Üí Continue
(Request aagay bhejni hai, server ready hai)

102 ‚Üí Processing
(Request process ho rahi hai, wait karo)

üîπ 2xx ‚Äì Success

200 ‚Üí OK
(Request bilkul theek thi aur server ne sahi response diya)

201 ‚Üí Created
(Naya resource successfully create ho gaya)

202 ‚Üí Accepted
(Request le li gayi hai aur process me hai)

üîπ 3xx ‚Äì Redirection

307 ‚Üí Temporary Redirect
(Resource temporarily kisi aur jagah hai)

308 ‚Üí Permanent Redirect
(Resource permanently shift ho gaya)

üîπ 4xx ‚Äì Client Error

400 ‚Üí Bad Request
(Request me kuch ghalat tha)

401 ‚Üí Unauthorized
(Access ke liye login/credentials chahiye)

402 ‚Üí Payment Required
(Is resource ke liye payment chahiye)

404 ‚Üí Not Found
(Jo resource mangi thi wo nahi mili)

üîπ 5xx ‚Äì Server Error

500 ‚Üí Internal Server Error
(Server ke andar koi problem aa gayi)

504 ‚Üí Gateway Timeout
(Server response nahi de raha, time out ho gaya)

‚úèÔ∏è Tip for Notes:
‚úî 2xx = Success ‚úÖ
‚úî 3xx = Redirect üîÄ
‚úî 4xx = Client ki galti ‚ùå
‚úî 5xx = Server ki problem ‚ö†Ô∏è

=======
multer ‚Üí Ye middleware h jo file uploads (images, videos etc.) ko handle krny k liye use hota h (Express apps me).
>>>>>>> ec1aa16e63e56f78734402945a9d216a614651eb

X---------------X-------------X--------------X--------------X--------------

13- REFISTER USER

if (
    [fullName, email, username. password].some((field) => 
    field?.trim() === "")) 
ismy hum ny array bana k sb field lagae, phr some laga k call back pass kia, phr hum kehty k agr ye field h (field?) to usko trim krdo, agr trim k bd bh wo empty h (=== "") to wo true return kry ga,agr wo TRUE return kry ga to wo field khali thaa
